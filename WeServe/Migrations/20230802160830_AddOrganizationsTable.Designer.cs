// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeServe.Data;

#nullable disable

namespace WeServe.Migrations
{
    [DbContext(typeof(WeServeContext))]
    [Migration("20230802160830_AddOrganizationsTable")]
    partial class AddOrganizationsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeServe.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine1 = "123 Main St.",
                            Banner = "https://placehold.co/640x320",
                            City = "City",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6247),
                            Description = "This is the first organization.",
                            Email = "email@me.com",
                            IsDeleted = false,
                            Name = "Organization 1",
                            PhoneNumber = "1234567890",
                            ProfilePicture = "https://placehold.co/320x320",
                            State = "State",
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6248),
                            Website = "https://www.google.com",
                            ZipCode = "12345"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine1 = "123 Main St.",
                            Banner = "https://placehold.co/640x320",
                            City = "City",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6254),
                            Description = "This is the second organization.",
                            Email = "email@me.com",
                            IsDeleted = false,
                            Name = "Organization 2",
                            PhoneNumber = "1234567890",
                            ProfilePicture = "https://placehold.co/320x320",
                            State = "State",
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6255),
                            Website = "https://www.google.com",
                            ZipCode = "12345"
                        });
                });

            modelBuilder.Entity("WeServe.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Age = 0,
                            Bio = "This user has not set a bio yet.",
                            ConcurrencyStamp = "b81c442c-9fcd-429b-b6d8-545421de3c4a",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(5971),
                            Email = "justin@jkruskie.com",
                            EmailConfirmed = false,
                            FirstName = "Justin",
                            IsBanned = false,
                            IsDeleted = false,
                            LastName = "Kruskie",
                            LockoutEnabled = false,
                            Major = "Undeclared",
                            NormalizedEmail = "JUSTIN@JKRUSKIE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECYBVohtuErzY0eh3eEMaGpIil7pOpkFUnnlyQEh3ZFvVS0Zevf0cUSkGWUEWdoPiA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://placehold.co/320x320",
                            Role = "Admin",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6016),
                            Year = "Freshman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Age = 0,
                            Bio = "This user has not set a bio yet.",
                            ConcurrencyStamp = "5cbf0531-7c37-4970-9975-b74bb7012d48",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6049),
                            Email = "student@weserve.com",
                            EmailConfirmed = false,
                            FirstName = "Student",
                            IsBanned = false,
                            IsDeleted = false,
                            LastName = "Account",
                            LockoutEnabled = false,
                            Major = "Undeclared",
                            NormalizedEmail = "STUDENT@WESERVE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECYBVohtuErzY0eh3eEMaGpIil7pOpkFUnnlyQEh3ZFvVS0Zevf0cUSkGWUEWdoPiA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://placehold.co/320x320",
                            Role = "Student",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6050),
                            Year = "Freshman"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Age = 0,
                            Bio = "This user has not set a bio yet.",
                            ConcurrencyStamp = "a21b2ec1-fd89-4f90-b254-09342f452d26",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6058),
                            Email = "organization@weserve.com",
                            EmailConfirmed = false,
                            FirstName = "Organization",
                            IsBanned = false,
                            IsDeleted = false,
                            LastName = "Account",
                            LockoutEnabled = false,
                            Major = "Undeclared",
                            NormalizedEmail = "ORGANIZATION@WESERVE.COM",
                            OrganizationId = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAECYBVohtuErzY0eh3eEMaGpIil7pOpkFUnnlyQEh3ZFvVS0Zevf0cUSkGWUEWdoPiA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://placehold.co/320x320",
                            Role = "Organization",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6059),
                            Year = "Freshman"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Age = 0,
                            Bio = "This user has not set a bio yet.",
                            ConcurrencyStamp = "ece300b8-74cb-4cbc-999a-1e87f9ac3aee",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6062),
                            Email = "moderator@weserve.com",
                            EmailConfirmed = false,
                            FirstName = "Moderator",
                            IsBanned = false,
                            IsDeleted = false,
                            LastName = "Account",
                            LockoutEnabled = false,
                            Major = "Undeclared",
                            NormalizedEmail = "MODERATOR@WESERVE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECYBVohtuErzY0eh3eEMaGpIil7pOpkFUnnlyQEh3ZFvVS0Zevf0cUSkGWUEWdoPiA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://placehold.co/320x320",
                            Role = "Moderator",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6063),
                            Year = "Freshman"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Age = 0,
                            Bio = "This user has not set a bio yet.",
                            ConcurrencyStamp = "e9547dbb-06e2-4cc7-ab4f-4c73bb450854",
                            CreatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6066),
                            Email = "admin@weserve.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsBanned = false,
                            IsDeleted = false,
                            LastName = "Account",
                            LockoutEnabled = false,
                            Major = "Undeclared",
                            NormalizedEmail = "ADMIN@WESERVE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECYBVohtuErzY0eh3eEMaGpIil7pOpkFUnnlyQEh3ZFvVS0Zevf0cUSkGWUEWdoPiA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://placehold.co/320x320",
                            Role = "Admin",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 8, 2, 12, 8, 30, 255, DateTimeKind.Local).AddTicks(6067),
                            Year = "Freshman"
                        });
                });

            modelBuilder.Entity("WeServe.Models.User", b =>
                {
                    b.HasOne("WeServe.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WeServe.Models.Organization", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
